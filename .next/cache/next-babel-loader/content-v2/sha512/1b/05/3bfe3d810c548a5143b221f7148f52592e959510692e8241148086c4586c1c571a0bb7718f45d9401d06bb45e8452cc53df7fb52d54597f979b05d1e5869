{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  if (window == undefined) return;\n\n  var _useState = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }),\n      storedValue = _useState[0],\n      setStoredValue = _useState[1]; // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"5hTcIUUhXmZZwkA5OW+zhuKtKjI=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/mnt/a19a7a81-2191-4824-bf23-fd9050b0961e/WebstormProjects/pokelist/utils/useLocalStorage.ts"],"names":["useState","useLocalStorage","key","initialValue","window","undefined","item","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AACA,SAASC,eAAT,CAA4BC,GAA5B,EAAyCC,YAAzC,EAA0D;AAAA;;AACxD;AACA;AACA,MAAGC,MAAM,IAAIC,SAAb,EAAwB;;AAHgC,kBAIlBL,QAAQ,CAAI,YAAM;AACtD,QAAI;AACF;AACA,UAAMM,IAAI,GAAGF,MAAM,CAACG,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAAb,CAFE,CAGF;;AACA,aAAOI,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAH,GAAsBH,YAAjC;AACD,KALD,CAKE,OAAOQ,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOR,YAAP;AACD;AACF,GAX6C,CAJU;AAAA,MAIjDW,WAJiD;AAAA,MAIpCC,cAJoC,iBAiBxD;AACA;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAgC;AAC/C,QAAI;AACF;AACA,UAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KADnD,CAFE,CAIF;;AACAF,MAAAA,cAAc,CAACG,YAAD,CAAd,CALE,CAMF;;AACAd,MAAAA,MAAM,CAACG,YAAP,CAAoBa,OAApB,CAA4BlB,GAA5B,EAAiCO,IAAI,CAACY,SAAL,CAAeH,YAAf,CAAjC;AACD,KARD,CAQE,OAAOP,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAbD;;AAeA,SAAO,CAACG,WAAD,EAAcE,QAAd,CAAP;AACD;;GAnCQf,e;;AAqCT,eAAeA,eAAf","sourcesContent":["import { useState } from \"react\";\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  if(window == undefined) return\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n"]},"metadata":{},"sourceType":"module"}