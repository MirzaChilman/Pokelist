{"ast":null,"code":"import { useEffect, useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  useEffect(() => {\n    const {\n      0: storedValue,\n      1: setStoredValue\n    } = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    }); // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n\n    const setValue = value => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n        setStoredValue(valueToStore); // Save to local storage\n\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n\n    return [storedValue, setValue];\n  });\n}\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/mnt/a19a7a81-2191-4824-bf23-fd9050b0961e/WebstormProjects/pokelist/utils/useLocalStorage.ts"],"names":["useEffect","useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AACA,SAASC,eAAT,CAA4BC,GAA5B,EAAyCC,YAAzC,EAA0D;AACxD;AACA;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAA,SAACK,WAAD;AAAA,SAAcC;AAAd,QAAgCL,QAAQ,CAAI,MAAM;AACtD,UAAI;AACF;AACA,cAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFE,CAGF;;AACA,eAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;AACD,OALD,CAKE,OAAOS,KAAP,EAAc;AACd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,eAAOT,YAAP;AACD;AACF,KAX6C,CAA9C,CADc,CAcd;AACA;;AACA,UAAMY,QAAQ,GAAIC,KAAD,IAAgC;AAC/C,UAAI;AACF;AACA,cAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACZ,WAAD,CAAjC,GAAiDY,KADnD,CAFE,CAIF;;AACAX,QAAAA,cAAc,CAACY,YAAD,CAAd,CALE,CAMF;;AACAV,QAAAA,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4BjB,GAA5B,EAAiCQ,IAAI,CAACU,SAAL,CAAeH,YAAf,CAAjC;AACD,OARD,CAQE,OAAOL,KAAP,EAAc;AACd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAbD;;AAeA,WAAO,CAACR,WAAD,EAAcW,QAAd,CAAP;AACD,GAhCQ,CAAT;AAiCD;;AAED,eAAed,eAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  useEffect(() => {\n    const [storedValue, setStoredValue] = useState<T>(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    });\n\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value: T | ((val: T) => T)) => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n\n    return [storedValue, setValue];\n  });\n}\n\nexport default useLocalStorage;\n"]},"metadata":{},"sourceType":"module"}