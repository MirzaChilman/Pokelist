{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(undefined),\n      storedValue = _useState[0],\n      setStoredValue = _useState[1];\n\n  useEffect(function () {\n    var getInitialState = function getInitialState() {\n      try {\n        // Get from local storage by key\n        var item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n        item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    };\n  }, []); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"EAykGHYeMEVgNO7HWKeocTJmB3M=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/mnt/a19a7a81-2191-4824-bf23-fd9050b0961e/WebstormProjects/pokelist/utils/useLocalStorage.ts"],"names":["useEffect","useState","useLocalStorage","key","initialValue","undefined","storedValue","setStoredValue","getInitialState","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AACA,SAASC,eAAT,CAA4BC,GAA5B,EAAyCC,YAAzC,EAA0D;AAAA;;AACxD;AACA;AAFwD,kBAGlBH,QAAQ,CAAII,SAAJ,CAHU;AAAA,MAGjDC,WAHiD;AAAA,MAGpCC,cAHoC;;AAIxDP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,UAAI;AACF;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BT,GAA5B,CAAb,CAFE,CAGF;;AACAM,QAAAA,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBL,YAA1B;AACD,OALD,CAKE,OAAOW,KAAP,EAAc;AACd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,eAAOX,YAAP;AACD;AACF,KAXD;AAYD,GAbQ,EAaN,EAbM,CAAT,CAJwD,CAmBxD;AACA;;AACA,MAAMc,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAgC;AAC/C,QAAI;AACF;AACA,UAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACb,WAAD,CAAjC,GAAiDa,KADnD,CAFE,CAIF;;AACAZ,MAAAA,cAAc,CAACa,YAAD,CAAd,CALE,CAMF;;AACAT,MAAAA,YAAY,CAACW,OAAb,CAAqBnB,GAArB,EAA0BU,IAAI,CAACU,SAAL,CAAeH,YAAf,CAA1B;AACD,KARD,CAQE,OAAOL,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAbD;;AAeA,SAAO,CAACT,WAAD,EAAcY,QAAd,CAAP;AACD;;GArCQhB,e;;AAuCT,eAAeA,eAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(undefined);\n  useEffect(() => {\n    const getInitialState = () => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    };\n  }, []);\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n"]},"metadata":{},"sourceType":"module"}