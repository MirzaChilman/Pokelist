{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport { createContainer } from \"unstated-next\";\nimport axios from \"axios\";\nimport apiClient from \"../../services/axios\";\nconst DEFAULT_LIMIT = 20;\n\nconst Container = () => {\n  const {\n    0: testState,\n    1: setTestState\n  } = useState(\"asdas\");\n  const {\n    0: fetchingPokemons,\n    1: setFetchingPokemons\n  } = useState(false);\n  const {\n    0: fetchingPokemonDetail,\n    1: setFetchingPokemonDetail\n  } = useState(false);\n  const {\n    0: pokemons,\n    1: setPokemons\n  } = useState({\n    count: 0,\n    next: null,\n    previous: null,\n    results: []\n  });\n  const {\n    0: pokemonDetail,\n    1: setPokemonDetail\n  } = useState(null);\n\n  const fetchPokemon = async () => {\n    try {\n      setFetchingPokemons(true);\n      if (!pokemons.next && pokemons.previous) return;\n\n      if (!pokemons.previous) {\n        const response = await apiClient.get(`pokemon?limit=${DEFAULT_LIMIT}`);\n        setPokemons(response.data);\n      }\n\n      if (pokemons.next) {\n        const response = await axios.get(pokemons.next);\n        setPokemons(prevState => {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            previous: response.data.previous,\n            next: response.data.next,\n            results: [...prevState.results, ...response.data.results]\n          });\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setFetchingPokemons(false);\n    }\n  };\n\n  const fetchPokemonDetail = async name => {\n    try {\n      setFetchingPokemonDetail(true);\n      const response = await apiClient.get(`pokemon/${name}`);\n      setPokemonDetail(response.data);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setFetchingPokemonDetail(false);\n    }\n  };\n\n  return {\n    testState,\n    setTestState,\n    fetchPokemon,\n    pokemons,\n    fetchingPokemons,\n    fetchPokemonDetail,\n    pokemonDetail,\n    fetchingPokemonDetail\n  };\n};\n\nconst PokemonContainer = createContainer(Container);\nexport default PokemonContainer;","map":{"version":3,"sources":["/mnt/a19a7a81-2191-4824-bf23-fd9050b0961e/WebstormProjects/pokelist/containers/PokemonContainer/PokemonContainer.tsx"],"names":["useState","createContainer","axios","apiClient","DEFAULT_LIMIT","Container","testState","setTestState","fetchingPokemons","setFetchingPokemons","fetchingPokemonDetail","setFetchingPokemonDetail","pokemons","setPokemons","count","next","previous","results","pokemonDetail","setPokemonDetail","fetchPokemon","response","get","data","prevState","error","console","fetchPokemonDetail","name","PokemonContainer"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { createContainer } from \"unstated-next\";\nimport axios from \"axios\";\nimport apiClient from \"../../services/axios\";\nimport {\n  PokemonDetailResponse,\n  PokemonResponse,\n} from \"./PokemonContainerModel\";\n\n\nconst DEFAULT_LIMIT = 20;\nconst Container = () => {\n  const [testState, setTestState] = useState<string>(\"asdas\");\n  const [fetchingPokemons, setFetchingPokemons] = useState<boolean>(false);\n  const [fetchingPokemonDetail, setFetchingPokemonDetail] = useState<boolean>(\n    false\n  );\n  const [pokemons, setPokemons] = useState<PokemonResponse>({\n    count: 0,\n    next: null,\n    previous: null,\n    results: [],\n  });\n  const [\n    pokemonDetail,\n    setPokemonDetail,\n  ] = useState<PokemonDetailResponse | null>(null);\n\n  const fetchPokemon = async () => {\n    try {\n      setFetchingPokemons(true);\n      if (!pokemons.next && pokemons.previous) return;\n      if (!pokemons.previous) {\n        const response = await apiClient.get(`pokemon?limit=${DEFAULT_LIMIT}`);\n        setPokemons(response.data);\n      }\n      if (pokemons.next) {\n        const response = await axios.get(pokemons.next);\n        setPokemons((prevState) => {\n          return {\n            ...prevState,\n            previous: response.data.previous,\n            next: response.data.next,\n            results: [...prevState.results, ...response.data.results],\n          };\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setFetchingPokemons(false);\n    }\n  };\n\n  const fetchPokemonDetail = async (name: string) => {\n    try {\n      setFetchingPokemonDetail(true);\n      const response = await apiClient.get(`pokemon/${name}`);\n      setPokemonDetail(response.data);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setFetchingPokemonDetail(false);\n    }\n  };\n\n  return {\n    testState,\n    setTestState,\n    fetchPokemon,\n    pokemons,\n    fetchingPokemons,\n    fetchPokemonDetail,\n    pokemonDetail,\n    fetchingPokemonDetail\n  };\n};\n\nconst PokemonContainer = createContainer(Container);\nexport default PokemonContainer;\n"]},"metadata":{},"sourceType":"module"}