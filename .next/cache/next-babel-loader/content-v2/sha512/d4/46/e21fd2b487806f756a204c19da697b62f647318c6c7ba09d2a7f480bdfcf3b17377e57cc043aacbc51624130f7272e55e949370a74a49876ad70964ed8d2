{"ast":null,"code":"import { useEffect, useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const {\n    0: storedValue,\n    1: setStoredValue\n  } = useState(undefined);\n  useEffect(() => {\n    const getInitialState = () => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n        setStoredValue(item ? JSON.parse(item) : initialValue);\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        setStoredValue(initialValue);\n      }\n    };\n\n    getInitialState();\n  }, []); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;","map":null,"metadata":{},"sourceType":"module"}