{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport { createContainer } from \"unstated-next\";\nimport axios from \"axios\";\nimport apiClient from \"../../services/axios\";\nconst DEFAULT_LIMIT = 20;\n\nconst Container = () => {\n  const {\n    0: testState,\n    1: setTestState\n  } = useState(\"asdas\");\n  const {\n    0: fetchingPokemons,\n    1: setFetchingPokemons\n  } = useState(false);\n  const {\n    0: fetchingPokemonDetail,\n    1: setFetchingPokemonDetail\n  } = useState(false);\n  const {\n    0: pokemons,\n    1: setPokemons\n  } = useState({\n    count: 0,\n    next: null,\n    previous: null,\n    results: []\n  });\n  const {\n    0: pokemonDetail,\n    1: setPokemonDetail\n  } = useState(null);\n\n  const fetchPokemon = async () => {\n    try {\n      setFetchingPokemons(true);\n      if (!pokemons.next && pokemons.previous) return;\n\n      if (!pokemons.previous) {\n        const response = await apiClient.get(`pokemon?limit=${DEFAULT_LIMIT}`);\n        setPokemons(response.data);\n      }\n\n      if (pokemons.next) {\n        const response = await axios.get(pokemons.next);\n        setPokemons(prevState => {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            previous: response.data.previous,\n            next: response.data.next,\n            results: [...prevState.results, ...response.data.results]\n          });\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setFetchingPokemons(false);\n    }\n  };\n\n  const fetchPokemonDetail = async name => {\n    try {\n      setFetchingPokemonDetail(true);\n      const response = await apiClient.get(`pokemon/${name}`);\n      setPokemonDetail(response.data);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setFetchingPokemonDetail(false);\n    }\n  };\n\n  return {\n    testState,\n    setTestState,\n    fetchPokemon,\n    pokemons,\n    fetchingPokemons,\n    fetchPokemonDetail,\n    pokemonDetail,\n    fetchingPokemonDetail\n  };\n};\n\nconst PokemonContainer = createContainer(Container);\nexport default PokemonContainer;","map":null,"metadata":{},"sourceType":"module"}